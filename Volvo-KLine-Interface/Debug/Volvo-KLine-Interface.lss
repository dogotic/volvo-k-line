
Volvo-KLine-Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  000005f6  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800244  00800244  000006ce  2**0
                  ALLOC
  3 .stab         00000dec  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2b  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_25>
  68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  7c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  80:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  84:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  8c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  90:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_36>
  94:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  98:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  9c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  ac:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  bc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  cc:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_51>
  d0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d8:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_54>
  dc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

000000e4 <__trampolines_start>:
  e4:	0c 94 94 02 	jmp	0x528	; 0x528 <ProcessCommands>
  e8:	0c 94 98 02 	jmp	0x530	; 0x530 <K_LineReceiver>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	d1 e2       	ldi	r29, 0x21	; 33
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
  fc:	12 e0       	ldi	r17, 0x02	; 2
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b2 e0       	ldi	r27, 0x02	; 2
 102:	e6 ef       	ldi	r30, 0xF6	; 246
 104:	f5 e0       	ldi	r31, 0x05	; 5
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0b bf       	out	0x3b, r16	; 59
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
 10c:	07 90       	elpm	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	a4 34       	cpi	r26, 0x44	; 68
 112:	b1 07       	cpc	r27, r17
 114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
 116:	22 e0       	ldi	r18, 0x02	; 2
 118:	a4 e4       	ldi	r26, 0x44	; 68
 11a:	b2 e0       	ldi	r27, 0x02	; 2
 11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
 11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
 120:	ac 34       	cpi	r26, 0x4C	; 76
 122:	b2 07       	cpc	r27, r18
 124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
 126:	0e 94 9c 02 	call	0x538	; 0x538 <main>
 12a:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_exit>

0000012e <__bad_interrupt>:
 12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <UART_Init>:

void (*rx_handlers[4]) (uint8_t data);

void UART_Init(UART_Number number)
{
	switch(number)
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	09 f4       	brne	.+2      	; 0x138 <UART_Init+0x6>
 136:	45 c0       	rjmp	.+138    	; 0x1c2 <UART_Init+0x90>
 138:	78 f1       	brcs	.+94     	; 0x198 <UART_Init+0x66>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	19 f0       	breq	.+6      	; 0x144 <UART_Init+0x12>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	b1 f0       	breq	.+44     	; 0x16e <UART_Init+0x3c>
 142:	08 95       	ret
			UCSR1B|=(1<<RXCIE1); //RX complete interrupt
			UCSR1C|=(1<<UCSZ11)|(1<<UCSZ11); // no parity, 1 stop bit, 8-bit data
		break;

		case UART_2:
			UCSR2B|=(1<<TXEN2); //enable TX
 144:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
			UCSR2B|=(1<<RXEN2); //enable RX
 14e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
 152:	80 61       	ori	r24, 0x10	; 16
 154:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
			UCSR2B|=(1<<RXCIE2); //RX complete interrupt
 158:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
			UCSR2C|=(1<<UCSZ21)|(1<<UCSZ21); // no parity, 1 stop bit, 8-bit data
 162:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 166:	84 60       	ori	r24, 0x04	; 4
 168:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
		break;
 16c:	08 95       	ret

		case UART_3:
			UCSR3B|=(1<<TXEN3); //enable TX
 16e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
			UCSR3B|=(1<<RXEN3); //enable RX
 178:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
			UCSR3B|=(1<<RXCIE3); //RX complete interrupt
 182:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
 186:	80 68       	ori	r24, 0x80	; 128
 188:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
			UCSR3C|=(1<<UCSZ31)|(1<<UCSZ31); // no parity, 1 stop bit, 8-bit data
 18c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
 196:	08 95       	ret
void UART_Init(UART_Number number)
{
	switch(number)
	{
		case UART_0:
			UCSR0B|=(1<<TXEN0); //enable TX
 198:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 19c:	88 60       	ori	r24, 0x08	; 8
 19e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
			UCSR0B|=(1<<RXEN0); //enable RX
 1a2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
			UCSR0B|=(1<<RXCIE0); //RX complete interrupt
 1ac:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
			UCSR0C|=(1<<UCSZ01)|(1<<UCSZ01); // no parity, 1 stop bit, 8-bit data
 1b6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
		break;
 1c0:	08 95       	ret

		case UART_1:
			UCSR1B|=(1<<TXEN1); //enable TX
 1c2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
			UCSR1B|=(1<<RXEN1); //enable RX
 1cc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
			UCSR1B|=(1<<RXCIE1); //RX complete interrupt
 1d6:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
			UCSR1C|=(1<<UCSZ11)|(1<<UCSZ11); // no parity, 1 stop bit, 8-bit data
 1e0:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
		break;
 1ea:	08 95       	ret

000001ec <UART_SetBaudRate>:
		break;
	}
}

void UART_SetBaudRate(UART_Number number, uint32_t BaudRate)
{
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
	uint16_t ubrr_val = (((F_CPU/(BaudRate*16UL)))-1);
 1f0:	db 01       	movw	r26, r22
 1f2:	ca 01       	movw	r24, r20
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	9c 01       	movw	r18, r24
 206:	ad 01       	movw	r20, r26
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	44 1f       	adc	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	44 1f       	adc	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	74 e2       	ldi	r23, 0x24	; 36
 21c:	84 ef       	ldi	r24, 0xF4	; 244
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__udivmodsi4>
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1

	switch(number)
 228:	c1 30       	cpi	r28, 0x01	; 1
 22a:	b9 f0       	breq	.+46     	; 0x25a <UART_SetBaudRate+0x6e>
 22c:	80 f0       	brcs	.+32     	; 0x24e <UART_SetBaudRate+0x62>
 22e:	c2 30       	cpi	r28, 0x02	; 2
 230:	41 f0       	breq	.+16     	; 0x242 <UART_SetBaudRate+0x56>
 232:	c3 30       	cpi	r28, 0x03	; 3
 234:	21 f4       	brne	.+8      	; 0x23e <UART_SetBaudRate+0x52>
		case UART_2:
			UBRR2 = ubrr_val;
		break;

		case UART_3:
			UBRR3 = ubrr_val;
 236:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 23a:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
		break;
	}
}
 23e:	cf 91       	pop	r28
 240:	08 95       	ret
		case UART_1:
			UBRR1 = ubrr_val;
		break;

		case UART_2:
			UBRR2 = ubrr_val;
 242:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 246:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>

		case UART_3:
			UBRR3 = ubrr_val;
		break;
	}
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret
	uint16_t ubrr_val = (((F_CPU/(BaudRate*16UL)))-1);

	switch(number)
	{
		case UART_0:
			UBRR0 = ubrr_val;
 24e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 252:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

		case UART_3:
			UBRR3 = ubrr_val;
		break;
	}
}
 256:	cf 91       	pop	r28
 258:	08 95       	ret
		case UART_0:
			UBRR0 = ubrr_val;
		break;

		case UART_1:
			UBRR1 = ubrr_val;
 25a:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 25e:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>

		case UART_3:
			UBRR3 = ubrr_val;
		break;
	}
}
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <UART_Transmit>:

void UART_Transmit(UART_Number number, uint8_t data)
{
	switch(number)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	31 f0       	breq	.+12     	; 0x276 <UART_Transmit+0x10>
 26a:	98 f0       	brcs	.+38     	; 0x292 <UART_Transmit+0x2c>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	51 f0       	breq	.+20     	; 0x284 <UART_Transmit+0x1e>
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	b1 f0       	breq	.+44     	; 0x2a0 <UART_Transmit+0x3a>
 274:	08 95       	ret
			UDR0 = data; // Transmit data
		break;

		case UART_1:
			// send a single character via USART
			while(!(UCSR1A&(1<<UDRE1))){}; //wait while previous byte is completed
 276:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 27a:	85 ff       	sbrs	r24, 5
 27c:	fc cf       	rjmp	.-8      	; 0x276 <UART_Transmit+0x10>
			UDR1 = data; // Transmit data
 27e:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
		break;
 282:	08 95       	ret

		case UART_2:
			// send a single character via USART
			while(!(UCSR2A&(1<<UDRE2))){}; //wait while previous byte is completed
 284:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 288:	85 ff       	sbrs	r24, 5
 28a:	fc cf       	rjmp	.-8      	; 0x284 <UART_Transmit+0x1e>
			UDR2 = data; // Transmit data
 28c:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		break;
 290:	08 95       	ret
{
	switch(number)
	{
		case UART_0:
			// send a single character via USART
			while(!(UCSR0A&(1<<UDRE0))){}; //wait while previous byte is completed
 292:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 296:	85 ff       	sbrs	r24, 5
 298:	fc cf       	rjmp	.-8      	; 0x292 <UART_Transmit+0x2c>
			UDR0 = data; // Transmit data
 29a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 29e:	08 95       	ret
			UDR2 = data; // Transmit data
		break;

		case UART_3:
			// send a single character via USART
			while(!(UCSR3A&(1<<UDRE3))){}; //wait while previous byte is completed
 2a0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <UART_Transmit+0x3a>
			UDR3 = data; // Transmit data
 2a8:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 2ac:	08 95       	ret

000002ae <UART_TransmitMultibyte>:
}

void UART_TransmitMultibyte(UART_Number number, uint8_t *data, uint8_t len)
{
	int i = 0;
	for (i=0; i<len; i++)
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	41 15       	cp	r20, r1
 2b2:	51 05       	cpc	r21, r1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <UART_TransmitMultibyte+0xa>
 2b6:	63 c0       	rjmp	.+198    	; 0x37e <UART_TransmitMultibyte+0xd0>
 2b8:	fb 01       	movw	r30, r22
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
	{
		UART_Transmit(number,data[i]);
 2be:	91 91       	ld	r25, Z+
	}
}

void UART_Transmit(UART_Number number, uint8_t data)
{
	switch(number)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	c1 f0       	breq	.+48     	; 0x2f4 <UART_TransmitMultibyte+0x46>
 2c4:	08 f4       	brcc	.+2      	; 0x2c8 <UART_TransmitMultibyte+0x1a>
 2c6:	52 c0       	rjmp	.+164    	; 0x36c <UART_TransmitMultibyte+0xbe>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	e1 f1       	breq	.+120    	; 0x344 <UART_TransmitMultibyte+0x96>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	31 f1       	breq	.+76     	; 0x31c <UART_TransmitMultibyte+0x6e>
}

void UART_TransmitMultibyte(UART_Number number, uint8_t *data, uint8_t len)
{
	int i = 0;
	for (i=0; i<len; i++)
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	24 17       	cp	r18, r20
 2d6:	35 07       	cpc	r19, r21
 2d8:	91 f7       	brne	.-28     	; 0x2be <UART_TransmitMultibyte+0x10>
 2da:	08 95       	ret
		break;

		case UART_1:
			// send a single character via USART
			while(!(UCSR1A&(1<<UDRE1))){}; //wait while previous byte is completed
			UDR1 = data; // Transmit data
 2dc:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}

void UART_TransmitMultibyte(UART_Number number, uint8_t *data, uint8_t len)
{
	int i = 0;
	for (i=0; i<len; i++)
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	24 17       	cp	r18, r20
 2e6:	35 07       	cpc	r19, r21
 2e8:	0c f0       	brlt	.+2      	; 0x2ec <UART_TransmitMultibyte+0x3e>
 2ea:	4b c0       	rjmp	.+150    	; 0x382 <UART_TransmitMultibyte+0xd4>
	{
		UART_Transmit(number,data[i]);
 2ec:	fb 01       	movw	r30, r22
 2ee:	e2 0f       	add	r30, r18
 2f0:	f3 1f       	adc	r31, r19
 2f2:	90 81       	ld	r25, Z
			UDR0 = data; // Transmit data
		break;

		case UART_1:
			// send a single character via USART
			while(!(UCSR1A&(1<<UDRE1))){}; //wait while previous byte is completed
 2f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 2f8:	85 fd       	sbrc	r24, 5
 2fa:	f0 cf       	rjmp	.-32     	; 0x2dc <UART_TransmitMultibyte+0x2e>
 2fc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 300:	85 ff       	sbrs	r24, 5
 302:	f8 cf       	rjmp	.-16     	; 0x2f4 <UART_TransmitMultibyte+0x46>
 304:	eb cf       	rjmp	.-42     	; 0x2dc <UART_TransmitMultibyte+0x2e>
		break;

		case UART_3:
			// send a single character via USART
			while(!(UCSR3A&(1<<UDRE3))){}; //wait while previous byte is completed
			UDR3 = data; // Transmit data
 306:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
}

void UART_TransmitMultibyte(UART_Number number, uint8_t *data, uint8_t len)
{
	int i = 0;
	for (i=0; i<len; i++)
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	24 17       	cp	r18, r20
 310:	35 07       	cpc	r19, r21
 312:	c4 f5       	brge	.+112    	; 0x384 <UART_TransmitMultibyte+0xd6>
	{
		UART_Transmit(number,data[i]);
 314:	fb 01       	movw	r30, r22
 316:	e2 0f       	add	r30, r18
 318:	f3 1f       	adc	r31, r19
 31a:	90 81       	ld	r25, Z
			UDR2 = data; // Transmit data
		break;

		case UART_3:
			// send a single character via USART
			while(!(UCSR3A&(1<<UDRE3))){}; //wait while previous byte is completed
 31c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 320:	85 fd       	sbrc	r24, 5
 322:	f1 cf       	rjmp	.-30     	; 0x306 <UART_TransmitMultibyte+0x58>
 324:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 328:	85 ff       	sbrs	r24, 5
 32a:	f8 cf       	rjmp	.-16     	; 0x31c <UART_TransmitMultibyte+0x6e>
 32c:	ec cf       	rjmp	.-40     	; 0x306 <UART_TransmitMultibyte+0x58>
		break;

		case UART_2:
			// send a single character via USART
			while(!(UCSR2A&(1<<UDRE2))){}; //wait while previous byte is completed
			UDR2 = data; // Transmit data
 32e:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
}

void UART_TransmitMultibyte(UART_Number number, uint8_t *data, uint8_t len)
{
	int i = 0;
	for (i=0; i<len; i++)
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	24 17       	cp	r18, r20
 338:	35 07       	cpc	r19, r21
 33a:	2c f5       	brge	.+74     	; 0x386 <UART_TransmitMultibyte+0xd8>
	{
		UART_Transmit(number,data[i]);
 33c:	fb 01       	movw	r30, r22
 33e:	e2 0f       	add	r30, r18
 340:	f3 1f       	adc	r31, r19
 342:	90 81       	ld	r25, Z
			UDR1 = data; // Transmit data
		break;

		case UART_2:
			// send a single character via USART
			while(!(UCSR2A&(1<<UDRE2))){}; //wait while previous byte is completed
 344:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 348:	85 fd       	sbrc	r24, 5
 34a:	f1 cf       	rjmp	.-30     	; 0x32e <UART_TransmitMultibyte+0x80>
 34c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 350:	85 ff       	sbrs	r24, 5
 352:	f8 cf       	rjmp	.-16     	; 0x344 <UART_TransmitMultibyte+0x96>
 354:	ec cf       	rjmp	.-40     	; 0x32e <UART_TransmitMultibyte+0x80>
	switch(number)
	{
		case UART_0:
			// send a single character via USART
			while(!(UCSR0A&(1<<UDRE0))){}; //wait while previous byte is completed
			UDR0 = data; // Transmit data
 356:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}

void UART_TransmitMultibyte(UART_Number number, uint8_t *data, uint8_t len)
{
	int i = 0;
	for (i=0; i<len; i++)
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	24 17       	cp	r18, r20
 360:	35 07       	cpc	r19, r21
 362:	74 f4       	brge	.+28     	; 0x380 <UART_TransmitMultibyte+0xd2>
	{
		UART_Transmit(number,data[i]);
 364:	fb 01       	movw	r30, r22
 366:	e2 0f       	add	r30, r18
 368:	f3 1f       	adc	r31, r19
 36a:	90 81       	ld	r25, Z
{
	switch(number)
	{
		case UART_0:
			// send a single character via USART
			while(!(UCSR0A&(1<<UDRE0))){}; //wait while previous byte is completed
 36c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 370:	85 fd       	sbrc	r24, 5
 372:	f1 cf       	rjmp	.-30     	; 0x356 <UART_TransmitMultibyte+0xa8>
 374:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 378:	85 ff       	sbrs	r24, 5
 37a:	f8 cf       	rjmp	.-16     	; 0x36c <UART_TransmitMultibyte+0xbe>
 37c:	ec cf       	rjmp	.-40     	; 0x356 <UART_TransmitMultibyte+0xa8>
 37e:	08 95       	ret
 380:	08 95       	ret
 382:	08 95       	ret
 384:	08 95       	ret
 386:	08 95       	ret

00000388 <UART_SetRxCallback>:
	}
}

void UART_SetRxCallback(UART_Number number, void (*fn)(uint8_t data))
{
	switch(number)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	a9 f0       	breq	.+42     	; 0x3b6 <UART_SetRxCallback+0x2e>
 38c:	78 f0       	brcs	.+30     	; 0x3ac <UART_SetRxCallback+0x24>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	19 f0       	breq	.+6      	; 0x398 <UART_SetRxCallback+0x10>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	31 f0       	breq	.+12     	; 0x3a2 <UART_SetRxCallback+0x1a>
 396:	08 95       	ret
		case UART_1:
			rx_handlers[1] = fn;
		break;

		case UART_2:
			rx_handlers[2] = fn;
 398:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <__data_end+0x5>
 39c:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <__data_end+0x4>
		break;
 3a0:	08 95       	ret

		case UART_3:
			rx_handlers[3] = fn;
 3a2:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <__data_end+0x7>
 3a6:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <__data_end+0x6>
 3aa:	08 95       	ret
void UART_SetRxCallback(UART_Number number, void (*fn)(uint8_t data))
{
	switch(number)
	{
		case UART_0:
			rx_handlers[0] = fn;
 3ac:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <__data_end+0x1>
 3b0:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <__data_end>
		break;
 3b4:	08 95       	ret

		case UART_1:
			rx_handlers[1] = fn;
 3b6:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <__data_end+0x3>
 3ba:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <__data_end+0x2>
		break;
 3be:	08 95       	ret

000003c0 <__vector_25>:
		break;
	}
}

ISR(USART0_RX_vect)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	0b b6       	in	r0, 0x3b	; 59
 3cc:	0f 92       	push	r0
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	rx_handlers[0](UDR0);
 3e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3ea:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__data_end>
 3ee:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__data_end+0x1>
 3f2:	19 95       	eicall
}
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	0f 90       	pop	r0
 40e:	0b be       	out	0x3b, r0	; 59
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_36>:

ISR(USART1_RX_vect)
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	0b b6       	in	r0, 0x3b	; 59
 426:	0f 92       	push	r0
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	rx_handlers[1](UDR1);
 440:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 444:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <__data_end+0x2>
 448:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <__data_end+0x3>
 44c:	19 95       	eicall
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0b be       	out	0x3b, r0	; 59
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_51>:

ISR(USART2_RX_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	0b b6       	in	r0, 0x3b	; 59
 480:	0f 92       	push	r0
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
	rx_handlers[2](UDR2);
 49a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 49e:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__data_end+0x4>
 4a2:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__data_end+0x5>
 4a6:	19 95       	eicall
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0b be       	out	0x3b, r0	; 59
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_54>:

ISR(USART3_RX_vect)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	0b b6       	in	r0, 0x3b	; 59
 4da:	0f 92       	push	r0
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	rx_handlers[3](UDR3);
 4f4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 4f8:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__data_end+0x6>
 4fc:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__data_end+0x7>
 500:	19 95       	eicall
}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0b be       	out	0x3b, r0	; 59
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <ProcessCommands>:
	return 0;
}

void ProcessCommands(uint8_t cmd)
{
	UART_Transmit(UART_0,cmd);
 528:	68 2f       	mov	r22, r24
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0c 94 33 01 	jmp	0x266	; 0x266 <UART_Transmit>

00000530 <K_LineReceiver>:
}

void K_LineReceiver(uint8_t data)
{
	UART_Transmit(UART_3,data);
 530:	68 2f       	mov	r22, r24
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	0c 94 33 01 	jmp	0x266	; 0x266 <UART_Transmit>

00000538 <main>:
void K_LineReceiver(uint8_t data);

int main(void)
{
	/* communication port with PC */
	UART_Init(UART_0);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 99 00 	call	0x132	; 0x132 <UART_Init>
	UART_SetRxCallback(UART_0,ProcessCommands);
 53e:	64 e9       	ldi	r22, 0x94	; 148
 540:	72 e0       	ldi	r23, 0x02	; 2
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 c4 01 	call	0x388	; 0x388 <UART_SetRxCallback>
	UART_SetBaudRate(UART_0,57600);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	51 ee       	ldi	r21, 0xE1	; 225
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_SetBaudRate>
	UART_TransmitMultibyte(UART_0,"UART_0 initialized\r\n",strlen("UART_0 initialized\r\n"));
 556:	44 e1       	ldi	r20, 0x14	; 20
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	72 e0       	ldi	r23, 0x02	; 2
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 57 01 	call	0x2ae	; 0x2ae <UART_TransmitMultibyte>

	/* K Line interface */
	UART_Init(UART_3);
 562:	83 e0       	ldi	r24, 0x03	; 3
 564:	0e 94 99 00 	call	0x132	; 0x132 <UART_Init>
	UART_SetRxCallback(UART_3,K_LineReceiver);
 568:	68 e9       	ldi	r22, 0x98	; 152
 56a:	72 e0       	ldi	r23, 0x02	; 2
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	0e 94 c4 01 	call	0x388	; 0x388 <UART_SetRxCallback>
	UART_SetBaudRate(UART_3,10040);
 572:	48 e3       	ldi	r20, 0x38	; 56
 574:	57 e2       	ldi	r21, 0x27	; 39
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_SetBaudRate>
	UART_TransmitMultibyte(UART_3,"UART_3 initialized\r\n",strlen("UART_3 initialized\r\n"));
 580:	44 e1       	ldi	r20, 0x14	; 20
 582:	65 e1       	ldi	r22, 0x15	; 21
 584:	72 e0       	ldi	r23, 0x02	; 2
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	0e 94 57 01 	call	0x2ae	; 0x2ae <UART_TransmitMultibyte>

	sei();
 58c:	78 94       	sei

	while(42)
	{
		UART_TransmitMultibyte(UART_0,(uint8_t *)"UART0:BOGDAJ, VRAKZEMI\r\n",strlen("UART2:BOGDAJ, VRAKZEMI\r\n"));
 58e:	48 e1       	ldi	r20, 0x18	; 24
 590:	6a e2       	ldi	r22, 0x2A	; 42
 592:	72 e0       	ldi	r23, 0x02	; 2
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 57 01 	call	0x2ae	; 0x2ae <UART_TransmitMultibyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	83 ed       	ldi	r24, 0xD3	; 211
 59e:	90 e3       	ldi	r25, 0x30	; 48
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <main+0x68>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <main+0x72>
 5aa:	00 00       	nop
 5ac:	f0 cf       	rjmp	.-32     	; 0x58e <main+0x56>

000005ae <__udivmodsi4>:
 5ae:	a1 e2       	ldi	r26, 0x21	; 33
 5b0:	1a 2e       	mov	r1, r26
 5b2:	aa 1b       	sub	r26, r26
 5b4:	bb 1b       	sub	r27, r27
 5b6:	fd 01       	movw	r30, r26
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <__udivmodsi4_ep>

000005ba <__udivmodsi4_loop>:
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	ee 1f       	adc	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	a2 17       	cp	r26, r18
 5c4:	b3 07       	cpc	r27, r19
 5c6:	e4 07       	cpc	r30, r20
 5c8:	f5 07       	cpc	r31, r21
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__udivmodsi4_ep>
 5cc:	a2 1b       	sub	r26, r18
 5ce:	b3 0b       	sbc	r27, r19
 5d0:	e4 0b       	sbc	r30, r20
 5d2:	f5 0b       	sbc	r31, r21

000005d4 <__udivmodsi4_ep>:
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	1a 94       	dec	r1
 5de:	69 f7       	brne	.-38     	; 0x5ba <__udivmodsi4_loop>
 5e0:	60 95       	com	r22
 5e2:	70 95       	com	r23
 5e4:	80 95       	com	r24
 5e6:	90 95       	com	r25
 5e8:	9b 01       	movw	r18, r22
 5ea:	ac 01       	movw	r20, r24
 5ec:	bd 01       	movw	r22, r26
 5ee:	cf 01       	movw	r24, r30
 5f0:	08 95       	ret

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
